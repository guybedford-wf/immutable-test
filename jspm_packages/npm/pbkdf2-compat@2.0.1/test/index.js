/* */
var assert=require("github:jspm/nodelibs@0.0.5/assert"),compat=require("../index"),fixtures=require("./fixtures");describe("pbkdf2-compat",function(){describe("pbkdf2",function(){["sha1","sha256","sha512"].forEach(function(t){describe(t,function(){fixtures.valid.forEach(function(e,r){var n=e.results[t];it("Async test case "+r+" for "+t+" matches "+n,function(r){compat.pbkdf2(e.key,e.salt,e.iterations,e.dkLen,t,function(t,e){assert.equal(e.toString("hex"),n),r()})})}),fixtures.invalid.forEach(function(t){it("should throw "+t.exception,function(e){compat.pbkdf2(t.key,t.salt,t.iterations,t.dkLen,t.algo,function(r){assert(new RegExp(t.exception).test(r)),e()})})})})}),it("should throw if no callback is provided",function(){assert.throws(function(){compat.pbkdf2("password","salt",1,32,"sha1")},/No callback provided to pbkdf2/)})}),describe("pbkdf2Sync",function(){it("defaults to sha1",function(){var t=compat.pbkdf2Sync("password","salt",1,32);assert.equal(t.toString("hex"),"0c60c80f961f0e71f3a9b524af6012062fe037a6e0f0eb94fe8fc46bdc637164")}),["sha1","sha256","sha512"].forEach(function(t){describe(t,function(){fixtures.valid.forEach(function(e,r){var n=e.results[t];it("Test case "+r+" for "+t+" matches "+n,function(){var r=compat.pbkdf2Sync(e.key,e.salt,e.iterations,e.dkLen,t);assert.equal(r.toString("hex"),n)})}),fixtures.invalid.forEach(function(t){it("should throw "+t.exception,function(){assert.throws(function(){compat.pbkdf2Sync(t.key,t.salt,t.iterations,t.dkLen,t.algo)},new RegExp(t.exception))})})})})})});
//# sourceMappingURL=index.js.map