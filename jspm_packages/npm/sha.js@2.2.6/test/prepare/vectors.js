/* */
!function(t){var e=require("github:jspm/nodelibs@0.0.5/assert"),r=require("github:jspm/nodelibs@0.0.5/crypto"),n=require("github:jspm/nodelibs@0.0.5/fs"),i=require("github:jspm/nodelibs@0.0.5/path"),s=i.join(__dirname,"vectors"),u=n.readdirSync(s).sort().filter(function(t){return t.match(/\.dat$/)}).map(function(t){return n.readFileSync(i.join(s,t))}),o={};["sha1","sha256","md5"].forEach(function(t){o[t]=n.readFileSync(i.join(s,"byte-hashes."+t),"ascii").split(/\r?\n/)});for(var a=[],h=0;h<u.length;h++){var c=r.createHash("sha512").update(new t(u[h])).digest("hex");a.push({input:u[h].toString("base64"),sha1:o.sha1[h],sha256:o.sha256[h],sha512:c}),e.equal(r.createHash("sha1").update(new t(u[h])).digest("hex"),o.sha1[h]),e.equal(r.createHash("sha256").update(new t(u[h])).digest("hex"),o.sha256[h]),e.equal(r.createHash("md5").update(new t(u[h])).digest("hex"),o.md5[h])}console.log(JSON.stringify(a,null,2))}(require("github:jspm/nodelibs@0.0.5/buffer").Buffer);
//# sourceMappingURL=vectors.js.map